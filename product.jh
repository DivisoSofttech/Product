entity Product{
	userId String,
	reference String required,//make unique
	searchkey String required , //make unique
	name String required,
	image ImageBlob,
	description String,
	sku String, //unique
	mpn String, //unique
	visible Boolean,
	dateOfMfd LocalDate,
	dateOfExpiry LocalDate,
	maximumStockLevel Double,
	reOrderLevel Double,
	outOfStock Boolean
}
entity Barcode{
	code String required, //make unique
	
	description String
}
entity BarcodeType {
	barcodeType String
}
entity Uom{
	name String required, //make unique
	description String
}
entity Category{
	name String required, //make unique
	image ImageBlob,
	visible Boolean,
	description String
}
entity Label{
	name String required, //unique
	description String
}
entity Note{
	matter String,
	dateOfCreation LocalDate
}
entity Status{
	reference String,
	name String required, //unique
	description String
}
entity Stock{
	reference String required, //unique
	deliveryNoteRef Long,
	dateOfStockUpdated LocalDate,
	storageCost Double
}
entity StockLine{
	reference String required, //unique
	buyPrice Double,
	sellPriceInclusive Double,
	sellPriceExclusive Double,
	grossProfit Double,
	margin Double,
	units Double required,
	infrastructureId Long, // note
	locationId String, // note
	supplierRef Long
}

entity StockCurrent{
units Double,
sellPrice Double
}
entity StockDiary{
dateOfCreation LocalDate,
units Double,
price Double,
isBuy Boolean

}

entity TaxCategory{
	name String required, //unique
	description String
}
entity Tax{
	name String required , //unique
	description String,
	rate Double required
}
entity TaxType {
	taxType String
}
relationship OneToOne{
	Product{barcode} to Barcode,
	StockCurrent{product} to Product{stockCurrent} 
	
}
relationship OneToMany{
	Product{notes} to Note,
	Product{stockDiaries} to StockDiary{product},
	Status{products} to Product,
	Status{stocks} to Stock,
	TaxCategory{taxes} to Tax,
	TaxCategory{products} to Product,
	Product{stockLines} to StockLine,
	Uom{stockLines} to StockLine,
	Tax{taxType} to TaxType,
	Barcode{barcodeType} to BarcodeType
	
}

relationship ManyToMany{
	Product{labels} to Label,
	Stock{stockLines} to StockLine,
	Product{category} to Category
	
	
}

service all with serviceImpl
dto all with mapstruct
paginate all with pagination
